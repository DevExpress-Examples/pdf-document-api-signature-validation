@page "/"
@using DevExpress.Pdf;
@using DevExpress.Drawing;
@using DevExpress.Blazor
@using System.Security.Cryptography.X509Certificates;
@inject IJSRuntime JS

<div class="container">
    <div class="card mt-3">
        <div class="card-header">
            PDF Signature Validation
        </div>
        <div class="card-body px-0">
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <Template>
                        <p class="ml-3 mr-3">
                            This application allows you validate PDF signatures and generate an information report. Click "Browse" to upload a file.
                            All detected signatures are shown in the table below.
                        </p>
                    </Template>
                </DxFormLayoutItem>
                <DxFormLayoutItem>
                    <Template>
                        <div class="input-group ml-3 mb-3">
                            <div class="custom-file">
                                <InputFile OnChange="@LoadDocument" class="custom-file-input"></InputFile>
                                <label class="custom-file-label">Load a PDF File</label>
                            </div>
                        </div>
                    </Template>
                </DxFormLayoutItem>
            </DxFormLayout>
            @if(isLoading) {
                <p class="ml-3 mb-3">Uploading...</p>
            } else {
                @if(signatureList.Count > 0) {

                    <div class="col">
                        <DxDataGrid Data="@signatureList"
                                    SelectionMode="DataGridSelectionMode.None"
                                    CssClass="mt-3"
                                    ShowPager="false">
                            <DxDataGridColumn Field="@nameof(SignatureInfo.Name)"
                                              Caption="Field Name" />
                            <DxDataGridColumn Field="@nameof(SignatureInfo.IssuerName)"
                                              Caption="Certificate Issuer Name" />
                            <DxDataGridColumn Field="@nameof(SignatureInfo.SignerName)"
                                              Caption="Signer Name" />
                            <DxDataGridColumn Field="@nameof(SignatureInfo.Verified)"
                                              Caption="Is Signature Valid" />
                            <DxDataGridColumn Field="@nameof(SignatureInfo.CertificateValid)"
                                              Caption="Is Certificate Valid" />
                        </DxDataGrid>
                    </div>
                } else if(FileIsLoaded) {
                    <p class="ml-3 mb-3">The loaded file does not contain any signatures</p>
                }
            }
        </div>
    </div>
</div>

@code {


    bool isLoading;


    List<SignatureInfo> signatureList = new List<SignatureInfo>();
    PdfDocumentSigner documentSigner;
    bool FileIsLoaded = false;

    async Task LoadDocument(InputFileChangeEventArgs e) {
        signatureList.Clear();
        isLoading = true;
        await using MemoryStream fs = new();
        if (e.FileCount > 0)
        {
            FileIsLoaded = true;
            await e.File.OpenReadStream().CopyToAsync(fs);
            documentSigner = new(fs);
            isLoading = false;

            var signatureInfo = documentSigner.GetSignatureInfo();
            if (signatureInfo != null)
            {
                foreach (var signature in signatureInfo)
                {
                    GenerateInfoList(signature);
                }
            }
        }else {
            FileIsLoaded = false;
        }
    }

    void GenerateInfoList(PdfSignatureInfo pdfSignature) {
        var signerName = pdfSignature.SignerName;
        var signature = documentSigner.GetPdfPkcs7Signature(pdfSignature.FieldName);
        bool isSignatureValid = signature.VerifySignature();
        var certificate = signature.GetSignatureCertificate();
        signatureList.Add(new SignatureInfo(pdfSignature, certificate, isSignatureValid));
    }

    public class SignatureInfo {
        public string Name { get; private set; }
        public X509Certificate2 Certificate { get; set; }
        public string SignerName;
        public bool Verified;
        public bool CertificateValid;
        public string IssuerName;

        public SignatureInfo(PdfSignatureInfo pdfSignature, X509Certificate2 certificate, bool isSignatureValid)
        {
            Name = pdfSignature.FieldName;
            Certificate = certificate;
            SignerName = pdfSignature.SignerName;
            Verified = isSignatureValid;
            IssuerName = certificate.Issuer;
            CertificateValid = certificate.Verify();
        }
    }

}
